// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  members     Member[]
  invitations Invitation[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  role String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String       @unique
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  Soul        Soul[]

  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Soul {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  gender          String?
  ageRange        String?
  maritalStatus   String?
  dateOfBirth     DateTime?
  phone           String?
  email           String?
  address         String?
  city            String?
  postalCode      String?
  profession      String?
  description     String?
  image           String?
  metadata        String?
  status          SoulStatus        @default(MEMBER)
  createdAt       DateTime
  updatedAt       DateTime
  EventInvitation EventInvitation[]
  Prayer          Prayer[]
  SoulIntegration SoulIntegration[]
  SoulFeedback    SoulFeedback[]

  OrganizationId String
  Organization   Organization @relation(fields: [OrganizationId], references: [id], onDelete: Cascade)

  ministryId String?

  departmentId String?
  Ministry     Ministry[]
  Department   Department[]

  @@map("soul")
}

enum SoulStatus {
  MEMBER
  AIDE
  ASSISTANT_PASTOR
  PASTOR
  MINISTER
  RESPONSIBLE
  STAR
}

model Event {
  id                String            @id
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime?
  location          String?
  image             String?
  metadata          String?
  numberOfAttendees Int?
  numberOfPrayers   Int?
  createdAt         DateTime
  updatedAt         DateTime
  EventInvitation   EventInvitation[]
  Prayer            Prayer[]

  @@map("event")
}

model EventInvitation {
  id        String  @id
  eventId   String
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  type      String
  soul      Soul?   @relation(fields: [soulId], references: [id])
  soulId    String?
  inviterId String?

  @@map("event_invitation")
}

model Prayer {
  id                    String    @id
  eventId               String
  event                 Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  soulId                String
  soul                  Soul      @relation(fields: [soulId], references: [id], onDelete: Cascade)
  prayerDate            DateTime
  prayerTime            DateTime?
  createdAt             DateTime
  updatedAt             DateTime
  prayerType            String?
  desireToBeAccompanied Boolean?

  @@map("prayer")
}

model SoulIntegration {
  id          String   @id
  soulId      String
  soul        Soul     @relation(fields: [soulId], references: [id], onDelete: Cascade)
  integration String
  wantToJoin  Boolean
  waitingList String?
  metadata    String?
  createdAt   DateTime
  updatedAt   DateTime
  adviserId   String?

  @@map("soul_integration")
}

model SoulFeedback {
  id        String   @id
  soulId    String
  soul      Soul     @relation(fields: [soulId], references: [id], onDelete: Cascade)
  feedback  String
  createdAt DateTime
  updatedAt DateTime

  @@map("soul_feedback")
}

model Ministry {
  id            String       @id
  name          String
  description   String?
  image         String?
  metadata      String?
  departments   Department[]
  membersId     String[]
  createdAt     DateTime
  updatedAt     DateTime
  responsible   Soul?        @relation(fields: [responsibleId], references: [id])
  responsibleId String?

  @@map("ministry")
}

model Department {
  id            String    @id
  name          String
  description   String?
  image         String?
  metadata      String?
  createdAt     DateTime
  updatedAt     DateTime
  Ministry      Ministry? @relation(fields: [ministryId], references: [id])
  ministryId    String?
  members       String[]
  reponsible    Soul?     @relation(fields: [responsibleId], references: [id])
  responsibleId String?

  @@map("department")
}
